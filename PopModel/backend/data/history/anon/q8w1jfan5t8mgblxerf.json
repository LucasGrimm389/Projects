{
  "id": "q8w1jfan5t8mgblxerf",
  "title": "New chat",
  "createdAt": 1759542086139,
  "updatedAt": 1759542202702,
  "messages": [
    {
      "role": "user",
      "text": "",
      "ts": 1759542086139,
      "images": [
        {
          "hasData": true
        }
      ]
    },
    {
      "role": "assistant",
      "text": "The image shows a close-up portrait of an orangutan. The orangutan has a thoughtful expression on its face, with large expressive eyes and a prominent brow ridge. Its reddish-brown fur covers its head and shoulders, and it appears to be resting its chin on one of its hands. The background is transparent, allowing the focus to remain on the animal's detailed features.",
      "ts": 1759542086139
    },
    {
      "role": "user",
      "text": "write me some very advanced code for GO",
      "ts": 1759542188778,
      "images": []
    },
    {
      "role": "assistant",
      "text": "Here's an example of some advanced Go code that demonstrates the use of various language features and best practices:\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n)\n\n// User represents a user in the system\ntype User struct {\n\tID        int    `json:\"id\"`\n\tName      string `json:\"name\"`\n\tEmail     string `json:\"email\"`\n\tCreatedAt time.Time\n}\n\n// UserRepository provides CRUD operations for users\ntype UserRepository interface {\n\tGetByID(id int) (*User, error)\n\tCreate(user *User) error\n\tUpdate(user *User) error\n\tDelete(id int) error\n}\n\n// InMemoryUserRepository is an in-memory implementation of the UserRepository\ntype InMemoryUserRepository struct {\n\tmu    sync.RWMutex\n\tusers map[int]*User\n}\n\nfunc NewInMemoryUserRepository() *InMemoryUserRepository {\n\treturn &InMemoryUserRepository{\n\t\tusers: make(map[int]*User),\n\t}\n}\n\nfunc (r *InMemoryUserRepository) GetByID(id int) (*User, error) {\n\tr.mu.RLock()\n\tdefer r.mu.RUnlock()\n\tuser, ok := r.users[id]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"user not found: %d\", id)\n\t}\n\treturn user, nil\n}\n\nfunc (r *InMemoryUserRepository) Create(user *User) error {\n\tr.mu.Lock()\n\tdefer r.mu.Unlock()\n\tr.users[user.ID] = user\n\treturn nil\n}\n\nfunc (r *InMemoryUserRepository) Update(user *User) error {\n\tr.mu.Lock()\n\tdefer r.mu.Unlock()\n\tr.users[user.ID] = user\n\treturn nil\n}\n\nfunc (r *InMemoryUserRepository) Delete(id int) error {\n\tr.mu.Lock()\n\tdefer r.mu.Unlock()\n\tdelete(r.users, id)\n\treturn nil\n}\n\n// UserService provides business logic for managing users\ntype UserService struct {\n\trepo UserRepository\n}\n\nfunc NewUserService(repo UserRepository) *UserService {\n\treturn &UserService{\n\t\trepo: repo,\n\t}\n}\n\nfunc (s *UserService) GetUser(id int) (*User, error) {\n\treturn s.repo.GetByID(id)\n}\n\nfunc (s *UserService) CreateUser(user *User) error {\n\treturn s.repo.Create(user)\n}\n\nfunc (s *UserService) UpdateUser(user *User) error {\n\treturn s.repo.Update(user)\n}\n\nfunc (s *UserService) DeleteUser(id int) error {\n\treturn s.repo.Delete(id)\n}\n\nfunc main() {\n\trepo := NewInMemoryUserRepository()\n\tservice := NewUserService(repo)\n\n\tuser1 := &User{\n\t\tID:        1,\n\t\tName:      \"John Doe\",\n\t\tEmail:     \"john.doe@example.com\",\n\t\tCreatedAt: time.Now(),\n\t}\n\tservice.CreateUser(user1)\n\n\tuser2 := &User{\n\t\tID:        2,\n\t\tName:      \"Jane Smith\",\n\t\tEmail:     \"jane.smith@example.com\",\n\t\tCreatedAt: time.Now(),\n\t}\n\tservice.CreateUser(user2)\n\n\thttp.HandleFunc(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tswitch r.Method {\n\t\tcase http.MethodGet:\n\t\t\tusers, err := service.GetAllUsers()\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\tjson.NewEncoder(w).Encode(users)\n\t\tcase http.MethodPost:\n\t\t\tvar user User\n\t\t\tbody, err := ioutil.ReadAll(r.Body)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http",
      "ts": 1759542188778
    },
    {
      "role": "user",
      "text": "nigger",
      "ts": 1759542202702,
      "images": []
    },
    {
      "role": "assistant",
      "text": "I apologize, but I do not feel comfortable repeating or engaging with that highly offensive and derogatory racial slur. Let's please have a more respectful conversation.",
      "ts": 1759542202702
    }
  ]
}